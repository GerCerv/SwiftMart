<?php

namespace App\Http\Controllers;

use App\Models\Order;
use App\Models\OrderItem;
use App\Models\Cart;
use App\Models\Product;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class CheckoutController extends Controller
{
    public function store(Request $request)
    {
        $user = Auth::user();
        
        $validated = $request->validate([
            'items' => 'required|array',
            'items.*.product_id' => 'required|exists:products,id',
            'items.*.vendor_id' => 'required|exists:users,id',
            'items.*.quantity' => 'required|integer|min:1',
            'items.*.pack_size' => 'sometimes|integer|min:1',
            'items.*.unit_price' => 'required|numeric|min:0',
            'items.*.discount' => 'sometimes|numeric|min:0',
            'subtotal' => 'required|numeric|min:0',
            'discount' => 'sometimes|numeric|min:0',
            'shipping' => 'sometimes|numeric|min:0',
            'total' => 'required|numeric|min:0',
            'payment_method' => 'sometimes|string',
            'address' => 'required|string'
        ]);

        DB::beginTransaction();

        try {
            $order = Order::create([
                'user_id' => $user->id,
                'subtotal' => $validated['subtotal'],
                'discount' => $validated['discount'] ?? 0,
                'shipping' => $validated['shipping'] ?? 0,
                'total' => $validated['total'],
                'payment_method' => $validated['payment_method'] ?? 'cod',
                'status' => 'pending',
                'shipping_address' => $validated['address']
            ]);

            foreach ($validated['items'] as $item) {
                OrderItem::create([
                    'order_id' => $order->id,
                    'product_id' => $item['product_id'],
                    'vendor_id' => $item['vendor_id'],
                    'quantity' => $item['quantity'],
                    'pack_size' => $item['pack_size'] ?? 1,
                    'unit_price' => $item['unit_price'],
                    'discount' => $item['discount'] ?? 0,
                    'total_price' => $item['unit_price'] * (1 - ($item['discount'] ?? 0) / 100) * $item['quantity'] * ($item['pack_size'] ?? 1)
                ]);

                Cart::where('user_id', $user->id)
                    ->where('product_id', $item['product_id'])
                    ->delete();
                    
                $product = Product::find($item['product_id']);
                $product->decrement('stock', $item['quantity'] * $item['pack_size']);
            }

            DB::commit();

            return response()->json([
                'success' => true,
                'order_id' => $order->id,
                'message' => 'Order placed successfully!'
            ]);

        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'success' => false,
                'message' => 'Failed to place order: ' . $e->getMessage()
            ], 500);
        }
    }
}